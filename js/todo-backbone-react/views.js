/// <reference path="../lib/backbone.d.ts" />
/// <reference path="../lib/react.d.ts" />
/// <reference path="../lib/reactdom.d.ts" />
/// <reference path="../lib/react-global.d.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="models.ts" />
var Demo;
(function (Demo) {
    var Todo;
    (function (Todo_1) {
        var BackboneReactApp;
        (function (BackboneReactApp) {
            /**
             * A driving view model for a todo application.
             */
            var AppViewModel = (function () {
                /**
                 * Initializes a new instanceof of the AppView class.
                 */
                function AppViewModel() {
                    this.todos = new BackboneReactApp.TodoList("my-todos");
                    this.todos.fetch();
                    ReactDOM.render(React.createElement(AppView, {"todos": this.todos}), document.getElementById("container"));
                }
                return AppViewModel;
            })();
            BackboneReactApp.AppViewModel = AppViewModel;
            /**
             * A view conaining some inputs and lists of incomplete and completed todos.
             */
            var AppView = (function (_super) {
                __extends(AppView, _super);
                /**
                 * Initializes a new instance of the AppView class. State is generated by
                 * the initial properties' todos.
                 *
                 * @param props   Initial properties to store (namely the TodoList).
                 */
                function AppView(props) {
                    this.props = props;
                    this.state = {
                        todos: this.props.todos.toJSON()
                    };
                    _super.call(this, props);
                }
                /**
                 * Renders the AppView.
                 *
                 * @returns The rendered JSX element.
                 */
                AppView.prototype.render = function () {
                    return (React.createElement("div", {"id": "todoapp"}, React.createElement("input", {"id": "input-text", "placeholder": "Insert text here", "onKeyPress": this.handleInputTextChange.bind(this)}), React.createElement("input", {"id": "input-button", "type": "button", "value": "Add", "onClick": this.addTodo.bind(this)}), React.createElement("input", {"id": "input-clear", "type": "button", "value": "Clear", "onClick": this.clearTodos.bind(this)}), React.createElement("div", {"id": "todo-list"}, React.createElement("h4", null, "Incomplete"), React.createElement(TodoListView, {"todos": this.getTodoValuesOfStatus(false), "updateTodoStatus": this.updateTodoStatus.bind(this)}), React.createElement("h4", null, "Completed"), React.createElement(TodoListView, {"todos": this.getTodoValuesOfStatus(true), "updateTodoStatus": this.updateTodoStatus.bind(this)}))));
                };
                /**
                 * Adds a new todo to the collection and view.
                 */
                AppView.prototype.addTodo = function () {
                    var todo = new BackboneReactApp.Todo(this.createTodoValue());
                    this.props.todos.add(todo);
                    todo.save();
                    this.setState({
                        todos: this.props.todos.toJSON()
                    });
                };
                /**
                 * Clears all todos from the collection and view.
                 */
                AppView.prototype.clearTodos = function () {
                    this.props.todos.forEach(function (todo) {
                        Backbone.sync("delete", todo);
                    });
                    this.props.todos.reset();
                    this.setState({
                        todos: []
                    });
                };
                /**
                 * Retrieves all state todo representations with the given completed status.
                 *
                 * @param status   The completed status as a boolean.
                 * @returns An array of JSON representations of todos.
                 */
                AppView.prototype.getTodoValuesOfStatus = function (status) {
                    return this.state.todos
                        .filter(function (todo) { return todo.completed === status; });
                };
                /**
                 * Generates the value for a new todo item. Text is taken from the inputText
                 * field from the view state.
                 *
                 * @returns A JSON representation of a new, incomplete todo item.
                 */
                AppView.prototype.createTodoValue = function () {
                    return {
                        timestamp: new Date().getTime(),
                        text: this.state.inputText,
                        completed: false
                    };
                };
                /**
                 * Callback for when the user types into the text input.
                 *
                 * @param event   The React event generated for the key press.
                 */
                AppView.prototype.handleInputTextChange = function (event) {
                    this.setState({
                        todos: this.state.todos,
                        inputText: event.target.value
                    });
                    if (event.nativeEvent.charCode === 13) {
                        setTimeout(this.addTodo.bind(this));
                    }
                };
                /**
                 * Flips a todo's completed status, saving it in the collection and
                 * updating the view state.
                 *
                 * @param todoRaw   A JSON representation of the todo, including its id.
                 */
                AppView.prototype.updateTodoStatus = function (todoRaw) {
                    var todo = this.props.todos.get(todoRaw.id);
                    todo.toggle();
                    todo.save();
                    this.setState({
                        todos: this.props.todos.toJSON()
                    });
                };
                return AppView;
            })(React.Component);
            BackboneReactApp.AppView = AppView;
            /**
             * A view for a list of todos, such as a list of incomplete or completed todos.
             */
            var TodoListView = (function (_super) {
                __extends(TodoListView, _super);
                function TodoListView() {
                    _super.apply(this, arguments);
                }
                /**
                 * Renders the TodoListiew.
                 *
                 * @returns The rendered JSX element.
                 */
                TodoListView.prototype.render = function () {
                    var _this = this;
                    return (React.createElement("div", {"className": "todos"}, this.props.todos.map(function (todo, i) {
                        return (React.createElement(TodoView, {"key": i, "todo": todo, "updateStatus": _this.props.updateTodoStatus.bind(_this, todo)}));
                    })));
                };
                return TodoListView;
            })(React.Component);
            BackboneReactApp.TodoListView = TodoListView;
            /**
             * A view for a single todo item.
             */
            var TodoView = (function (_super) {
                __extends(TodoView, _super);
                function TodoView() {
                    _super.apply(this, arguments);
                }
                /**
                 * Renders the TodoView.
                 *
                 * @returns The rendered JSX element.
                 */
                TodoView.prototype.render = function () {
                    return (React.createElement("div", {"id": this.props.todo.timestamp.toString(), "className": "view"}, React.createElement("input", {"className": "toggle", "type": "checkbox", "ref": "toggle", "onChange": this.props.updateStatus.bind(this, this.props), "defaultChecked": this.props.todo.completed}), React.createElement("label", null, this.props.todo.text)));
                };
                return TodoView;
            })(React.Component);
            BackboneReactApp.TodoView = TodoView;
        })(BackboneReactApp = Todo_1.BackboneReactApp || (Todo_1.BackboneReactApp = {}));
    })(Todo = Demo.Todo || (Demo.Todo = {}));
})(Demo || (Demo = {}));
